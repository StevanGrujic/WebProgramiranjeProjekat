// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjekatBackend.Models;

namespace Projekat.Migrations
{
    [DbContext(typeof(RokContext))]
    [Migration("20210121171342_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AmfiteatarIspit", b =>
                {
                    b.Property<int>("AmfiteatriID")
                        .HasColumnType("int");

                    b.Property<int>("IspitiSifra")
                        .HasColumnType("int");

                    b.HasKey("AmfiteatriID", "IspitiSifra");

                    b.HasIndex("IspitiSifra");

                    b.ToTable("AmfiteatarIspit");
                });

            modelBuilder.Entity("AmfiteatarIspitniRok", b =>
                {
                    b.Property<int>("AmfiteatriID")
                        .HasColumnType("int");

                    b.Property<int>("IspitniRokoviID")
                        .HasColumnType("int");

                    b.HasKey("AmfiteatriID", "IspitniRokoviID");

                    b.HasIndex("IspitniRokoviID");

                    b.ToTable("AmfiteatarIspitniRok");
                });

            modelBuilder.Entity("IspitIspitniRok", b =>
                {
                    b.Property<int>("IspitniRokoviID")
                        .HasColumnType("int");

                    b.Property<int>("listaIspitaSifra")
                        .HasColumnType("int");

                    b.HasKey("IspitniRokoviID", "listaIspitaSifra");

                    b.HasIndex("listaIspitaSifra");

                    b.ToTable("IspitIspitniRok");
                });

            modelBuilder.Entity("IspitStudent", b =>
                {
                    b.Property<int>("IspitiSifra")
                        .HasColumnType("int");

                    b.Property<int>("listaStudenataID")
                        .HasColumnType("int");

                    b.HasKey("IspitiSifra", "listaStudenataID");

                    b.HasIndex("listaStudenataID");

                    b.ToTable("IspitStudent");
                });

            modelBuilder.Entity("ProjekatBackend.Models.Amfiteatar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Color");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int")
                        .HasColumnName("Kapacitet");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Naziv");

                    b.HasKey("ID");

                    b.ToTable("Amfiteatar");
                });

            modelBuilder.Entity("ProjekatBackend.Models.Ispit", b =>
                {
                    b.Property<int>("Sifra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Sifra")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Naziv");

                    b.HasKey("Sifra");

                    b.ToTable("Ispit");
                });

            modelBuilder.Entity("ProjekatBackend.Models.IspitniRok", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Naziv");

                    b.HasKey("ID");

                    b.ToTable("Ispitni rok");
                });

            modelBuilder.Entity("ProjekatBackend.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("BrojIndeksa")
                        .HasColumnType("int")
                        .HasColumnName("BrojIndeksa");

                    b.Property<int>("GodinaStudija")
                        .HasColumnType("int")
                        .HasColumnName("Godina studija");

                    b.Property<string>("Ime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ime");

                    b.Property<string>("Prezime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Prezime");

                    b.HasKey("ID");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("AmfiteatarIspit", b =>
                {
                    b.HasOne("ProjekatBackend.Models.Amfiteatar", null)
                        .WithMany()
                        .HasForeignKey("AmfiteatriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjekatBackend.Models.Ispit", null)
                        .WithMany()
                        .HasForeignKey("IspitiSifra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmfiteatarIspitniRok", b =>
                {
                    b.HasOne("ProjekatBackend.Models.Amfiteatar", null)
                        .WithMany()
                        .HasForeignKey("AmfiteatriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjekatBackend.Models.IspitniRok", null)
                        .WithMany()
                        .HasForeignKey("IspitniRokoviID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IspitIspitniRok", b =>
                {
                    b.HasOne("ProjekatBackend.Models.IspitniRok", null)
                        .WithMany()
                        .HasForeignKey("IspitniRokoviID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjekatBackend.Models.Ispit", null)
                        .WithMany()
                        .HasForeignKey("listaIspitaSifra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IspitStudent", b =>
                {
                    b.HasOne("ProjekatBackend.Models.Ispit", null)
                        .WithMany()
                        .HasForeignKey("IspitiSifra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjekatBackend.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("listaStudenataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
